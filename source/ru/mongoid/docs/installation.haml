- content_for :head do
  %title Mongoid: Установка

%h1 Начало работы

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Подготовка", "#prerequisites"
      %li= link_to "Установка", "#installation"
      %li= link_to "Настройка", "#configuration"
      %li= link_to "Логирование", "#logging"
      %li= link_to "Наборы реплик", "#replica"
      %li= link_to "Шардинг", "#sharding"

%section#prerequisites
  %h2 Подготовка

  %p
    Перед тем, как приняться за разработку веб-приложения с использованием
    Mongoid, убедитесь, что у вас в наличии:

    %ul
      %li Хорошее знание Ruby.
      %li Если вы используете какой-либо веб-фреймворк, то запаситесь хорошими знаниями и о нём тоже.
      %li Полное понимание MongoDB.

  %p
    Тут вы наверняка воскликните: «Спасибо, Капитан Очевидность!», но если вы решили, что
    легко осилите Mongoid только потому, что прочитали в каком-то блоге, что Rails и
    MongoDB — это круто, то <i>добро пожаловать в ад</i>.

  %p
    Mongoid основан на множестве непростых аспектов языка Ruby, которые
    не известны новичкам, и вы только разозлите разработчиков Mongoid, отправляя
    баг-репорт, содержащий распространенные ошибки начинающих, напрасно потратите
    наше время и время других пользователей.

  .well
    %table
      %tr
        %td.samurai= image_tag "/images/samurai.png"
        %td.note
          %p
            <i>БАЗА ДАННЫХ — ЭТО НЕ ЧЁРНЫЙ ЯЩИК.</i>.
          Mongoid предоставляет уровень абстракции, который облегчает
          жизнь разработчикам, однако внутри — вся мощь MongoDB, и очень
          важно понимать, что там внутри на самом деле происходит. Для этого
          в документации для всех операций персистентности полностью приводятся
          выполняемые запросы к базе данных. Раз уж мы решили вам о чём-то
          рассказать, значит, неплохо бы послушать. :)

%section#installation
  %h2 Установка

  %p
    Рекомендуемый способ установки Mongoid — bundler. Нужно просто добавить
    Mongoid в <code>Gemfile</code> проекта.

  :coderay
    #!ruby
    gem "mongoid", "~> 3.0.0.rc"

  %p
    Также вы можете установить гем напрямую с rubygems.org:

  :coderay
    #!ruby
    $ gem install mongoid

%section#configuration
  %h2 Настройка

  %p
    Настройка Mongoid выполняется с помощию файла конфигурации
    <code>mongoid.yml</code>, в котором указываются сессии подключения к
    базе данных. Ниже приведена простейшая конфигурация, в которой сессия
    по умолчанию настоена на адрес «localhost:27017», и эта сессия предоставляет
    одну базу данных, которая называется «mongoid».

  :coderay
    #!yaml
    development:
      sessions:
        default:
          database: mongoid
          hosts: localhost:27017

  %h3 Rails-приложение

  %p
    Вы можете создать файл конфигурации вызвав соответствующий генератор и
    отредактировав затем файл <code>myapp/config/mongoid.yml</code> так, как
    душе угодно. Mongoid будет использовать настройки из этого файла автоматически.

  :coderay
    #!text
    $ rails g mongoid:config

  %h3 Внутри файла конфигурации Mongoid

  %p
    Чтобы разобраться во всех возможностсях Mongoid давайте-ка посмотрим 
    на пример файла конфигурации <code>mongoid.yml</code>
    со всеми возможными настройками и пояснениями к ним.

  :coderay
    #!yaml
    # Указывает Mongoid, для какой среды предназначена конфигурация.
    production:
      # Начало секции настройки сессии. Сессии можно называть как угодно,
      # и создавать их сколько угодно, но как минимум одна сессия должна
      # быть обязательно, и называться она должна 'default'.
      sessions:
        # Сессия по умолчанию.
        default:
          # Сессия может содержать любое количество хостов. Обычно, он один
          # в случае установки приложения на одном сервере, и как минимум
          # три для набора реплик. Хост должен быть представлен массивом
          # пар хост:порт. Это сессия для одного сервера.
          hosts:
            - flame.mongohq.com:27017
          # Указывает имя базы данных по умолчанию.
          database: mongoid
          # Так как эта база данных соответствует сессии, которая подключается
          # к MongoHQ, нам необходимо указать настройки аутентификации.
          username: user
          password: password
        # Это вторая сессия с набором реплик.
        replica_set:
          # Это набор реплик, состоящий из 3 нод.
          hosts:
            - dedicated1.myapp.com:27017
            - dedicated2.myapp.com:27017
            - dedicated3.myapp.com:27017
          database: mongoid
          # Мы можем установить для сессии собственные настройки, например,
          # выполнение операций чтения на дополнительных нодах и использование
          # безопасного режима по умолчанию.
          options:
            consistency: :eventual
            safe: true
        # Это настройки третьей сессии в фронтэндовом шарде Mongos.
        shard:
          # Настройки шардового сервера Mongos.
          hosts:
            - mongos.myapp.com:27017
          database: mongoid
        # Настройка набора реплик с аутентификацией через URI.
        another:
          uri: mongodb://user:pass@59.1.22.1:27017,59.1.22.2:27017/mongoid
      # Тут указаны настройки Mongoid, которые будут рассмотрены более детально
      # позднее.
      options:
        allow_dynamic_fields: false
        identity_map_enabled: true
        include_root_in_json: true
        include_type_for_serialization: true
        # Обратите внимание, что эту опцию можно также установить в значение true,
        # если вы хотите, чтобы предварительно загружались все модели, однако,
        # необходимости в этом почти никогда нет. Для большинства случаев подойдет
        # значение false.
        preload_models:
          - Canvas
          - Browser
          - Firefox
        scope_overwrite_exception: true
        raise_not_found_error: false
        skip_version_check: false
        use_activesupport_time_zone: false
        use_utc: true

  %h3 Опции конфигурации

  %p
    На данный момент Mongoid поддерживает следующие опции конфигурации,
    которые можно как указать в файле mongoid.yml, так и задать программно.
    Значения по умолчанию указаны в скобках.


  %ul.config
    %li
      <code>allow_dynamic_fields</code>(true): Если к объекту добавляются
      атрибуты, которые не объявлены как поля модели, то поля генерируются
      для них автоматически и сохраняются в базе данных. Если опция
      установлена в false, то присвоение значения необъявленному полю
      вызовет ошибку.
    %li
      <code>identity_map_enabled</code>(false): Если опция установлена в true,
      то Mongoid будет сохранять загружаемые из базы объекты в карте соответствия
      (identity map) по их идентификаторам, благодаря чему последовательные запросы
      одного объекта в одном модуле работы (unit of work) не будут нагружать базу
      данных. На данный момент поддерживаются только запросы относительно связанных
      объектов. Дополнительная информация в разделе Identity Map.
    %li
      <code>include_root_in_json</code>(false): Если опция установлена в true,
      mongoid будет добавлять название корневого документа и название каждой
      ассоциации как корневого элемента при вызове метода <code>#to_json</code>
      модели.
    %li
      <code>include_type_for_serialization</code>(false): Если опция установлена в
      true, то Mongoid будет добавлять поле '_type' при сериализации в JSON и XML.
    %li
      <code>preload_models</code>(false): Для тех сред, где не включено кэширование
      классов, Mongoid будет выполнять предварительную заргузку классов моделей
      для каждого запроса. При включении этой опции в качестве значения указывайте
      массив имён классов, которые используют наследование.
    %li
      <code>protect_sensitive_fields</code>(true): По умолчанию Mongoid автоматически
      защищает '_id' и '_type' от массового присвоения. Устанавливайте эту опцию в
      false только если не боитесь за безопасность своего приложения.
    %li
      <code>raise_not_found_error</code>(true): Mongoid будет вызывать
      <code>Mongoid::Errors::DocumentNotFound</code> при попытке выполнить
      поиск документа по несуществующему идентификатору. Если опция установлена
      в false, то такой запрос просто вернет nil.
    %li
      <code>skip_version_check</code>(false): Если у вас возникают проблемы
      при аутентификации на MongoHQ или MongoMachine из-за отсутствия доступа
      к системной коллекции, установите значение этой опции в true.
    %li
      <code>scope_overwrite_exception</code>(false): Mongoid будет вызывать
      ошибку при попытке создать скоп (scope) с именем, которое совпадает с
      названием существующего метода.
    %li
      <code>use_activesupport_time_zone</code>(true): При использовании в
      Rails-приложении Mongoid будет конвертировать любое время в локальную
      временную зону из настроек Active Support.
    %li
      <code>use_utc</code>(false): Указывает Mongoid всегда конвертировать
      любое время в UTC.

  %p
    Примеры конфигурации можно найти в
    <a href="https://github.com/mongoid/mongoid/blob/master/spec/config/mongoid.yml">
    репозитории Mongoid</a>, а также в
    <a href="https://github.com/mongoid/echo/blob/master/config/mongoid.yml">
    приложении-примере Echo</a>.


  %h3 Избавляемся от Active Record

  %p
    Теперь, когда у нас есть <code>mongoid.yml</code>, вам, наверное, не терпится
    удалить ненужный <code>database.yml</code>, да? Но как только вы удалите его,
    отовсюду повалятся ошибки <code>ActiveRecord</code>.
    Если вы не собираетесь использовать Mongo вместе с какой-нибудь базой
    данных SQL, то ActiveRecord вам больше не понадобится. Вот как удалить ActiveRecord
    для последней версии Rails 3...

  %p
    Откройте <code>myapp/config/application.rb</code> и в самом верху сотрите
    строчку <code>require "rails/all"</code> а затем добавьте следующее:

  :coderay
    #!ruby
    require "action_controller/railtie"
    require "action_mailer/railtie"
    require "active_resource/railtie"
    require "rails/test_unit/railtie"
    # require "sprockets/railtie" # Раскомментируйте эту строку, если используете Rails 3.1+

  %p
    Для Rails 3.2+ потребуется удалить настройки ActiveRecord 
    из файла конфигурации среды, такого, как
    <code>myapp/config/environments/development.rb</code>, например.
    Закомментируйте строки как показано ниже.

  :coderay
    #!ruby
    # config.active_record.mass_assignment_sanitizer = :strict
    # config.active_record.auto_explain_threshold_in_seconds = 0.5

  %p
    Также Rails позволяет сгенерировать приложение, в котором ActiveRecord
    отсутствует изначально.

  :coderay
    #!text
    rails new app_name --skip-active-record

  %h3 Sinatra, Padrino и прочие

  %p
    Создайте <code>mongoid.yml</code> в любом месте на ваше усмотрение.
    А во время инициализации приложения не забудьте вызвать:

  :coderay
    #!ruby
    Mongoid.load!("path/to/your/mongoid.yml")

%section#logging
  %h2 Логирование

  %p
    Настройки логирования управляются простым изменением уровня логгера для
    Mongoid или Moped.

  :coderay
    #!ruby
    module MyApplication
      class Application << Rails::Application
        Mongoid.logger.level = Logger::DEBUG
        Moped.logger.level = Logger::DEBUG
      end
    end

%section#replica
  %h2 Наборы реплик

  %p
    Чтобы создать набор реплик (replica set), необходимо поместить каждый
    член набора в секцию <code>hosts</code> файла <code>mongoid.yml</code>
    и Mongoid с Moped сделают всё остальное. Уровень связности по умолчанию
    <code>:eventual</code>, это значит, что операции чтения будут направлены
    к дополнительным узлам. Если это вас не устраивает, измените значение
    опции на <code>:strong</code>, и все операции будут направляться
    главному узлу.

  :coderay
    #!yaml
    sessions:
      default:
        hosts:
          - repl0.myapp.com:27017
          - repl1.myapp.com:27017
          - repl3.myapp.com:27017
        database: mongoid
        options:
          consistency: :strong

%section#sharding
  %h2 Шардинг

  %p
    Если вы используете Mongoid в шарде и хотите настроить его так, чтобы он
    добавлял ключи шард при изменениях, то это необходимо указать на
    уровне класса модели.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document

      field :first_name, type: String
      field :last_name, type: String

      shard_key :first_name, :last_name
    end

  %p
    Убедитесь, что настройки хостов в файле <code>mongoid.yml</code>
    указывают на сервер <code>mongos</code>.

  :coderay
    #!yaml
    sessions:
      default:
        hosts:
          - mongos.myapp.com:27017
        database: mongoid
        options:
          consistency: :eventual
