- content_for :head do
  %title Mongoid: Разное

%h1 Разное

%p
  В Mongoid также есть несколько дополнительных функций, которые могут быть
  полезны при разработке приложений.

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Кэширование", "#caching"
      %li= link_to "Paranoid Documents", "#paranoia"
      %li= link_to "Версионирование", "#versioning"
      %li= link_to "Метки времени", "#timestamps"

%section#caching
  %h2 Кэширование

  %p
    По умолчанию, Mongoid использует обёртку курсора Ruby-драйвера MongoDB
    для эффективного использования памяти при выполнении больших запросов
    и обработке больших наборов данных. Однако, если вы хотите загрузить
    все документы, соответствующие запросу, в память и возвращать их
    на протяжении <i>n</i> итераций без выполнения запросов к базе данных,
    существует возможность кэширования класса или критерия.

  %p
    Чтобы «кэшировать» все запросы для модели:

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      cache
    end

  %p
    Для кэширования отдельного запроса:

  :coderay
    #!ruby
    Person.where(first_name: "Franziska").cache

%section#paranoia
  %h2 Paranoid Documents

  %p
    Существуют ситуации, когда вам захочется сделать так, чтобы документы при
    удалении в действительности не удалялись из базы данных, а просто «помечались»
    как удалённые. Для реализации такого поведения в Mongoid есть модуль Paranoia.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Paranoia
    end

    person.delete # Устанавливает значение поля deleted_at в текущее время.
    person.delete! # Полностью удаляет документ из базы данных.
    person.destroy! # Полностью удаляет документ с вызовом колбэков.
    person.restore # Восстанавливает «удалённый» документ.

  %p
    К документам, «помеченным» как удалённые (удалённым не по-настоящему),
    в любой момент можно получить доступ вызвав собственный метод
    <code>deleted</code> класса.

  :coderay
    #!ruby
    Person.deleted # Возвращает набор документов, помеченных как удалённые.

%section#versioning
  %h2 Версионирование

  %p
    Mongoid поддерживает простое версионирование, которое реализовано в
    модуле <code>Mongoid::Versioning</code>. Включив этот модуль в
    класс, вы получите в документе вложенную связь versions, которая будет пополняться
    при каждом сохранении документа. Также будет обновляться номер версии
    документа, который представлен целым числом.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Versioning
    end

  %p
    Также вы можете установить максимальное количество последних версий, которое
    будет хранить Mongoid, указав параметр <code>max_versions</code>.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Versioning

      # хранить не больше 5 последних версий записи
      max_versions 5
    end

  %p
    Если при выполнении операции персистентности версионирование не требуется,
    то его можно отключить для данной операции, обернув вызов в блок
    <code>versionless</code>.

  :coderay
    #!ruby
    person.versionless do |doc|
      doc.update_attributes(name: "Theodore")
    end

%section#timestamps
  %h2 Метки времени

  %p
    В состав Mongoid входит модуль временных меток <code>Mongoid::Timestamps</code>,
    который может быть включен в класс для получения базовых возможностей полей
    <code>created_at</code> и <code>updated_at</code> (время создания и время обновления).

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Timestamps
    end

  %p
    Также можно указать, какого именно типа метка требуется — времени
    создания или модификации.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Timestamps::Created
    end

    class Post
      include Mongoid::Document
      include Mongoid::Timestamps::Updated
    end

  %p
    Если необходимо отключить запись временных меток для отдельного вызова,
    можно использовать метод timeless:

  :coderay
    #!ruby
    person.timeless.save
    Person.timeless.create!
